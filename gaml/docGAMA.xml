<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<doc>
<constantsCategories/>
<conceptList>
<concept id="action"/>
<concept id="agent_location"/>
<concept id="agent_movement"/>
<concept id="algorithm"/>
<concept id="architecture"/>
<concept id="arithmetic"/>
<concept id="asc"/>
<concept id="attribute"/>
<concept id="autosave"/>
<concept id="background"/>
<concept id="batch"/>
<concept id="bdi"/>
<concept id="behavior"/>
<concept id="camera"/>
<concept id="cast"/>
<concept id="chart"/>
<concept id="clustering"/>
<concept id="color"/>
<concept id="comodel"/>
<concept id="comparison"/>
<concept id="communication"/>
<concept id="condition"/>
<concept id="constant"/>
<concept id="container"/>
<concept id="csv"/>
<concept id="cycle"/>
<concept id="date"/>
<concept id="database"/>
<concept id="dem"/>
<concept id="dgs"/>
<concept id="diffusion"/>
<concept id="dimension"/>
<concept id="display"/>
<concept id="distribution"/>
<concept id="dxf"/>
<concept id="edge"/>
<concept id="elevation"/>
<concept id="enumeration"/>
<concept id="equation"/>
<concept id="experiment"/>
<concept id="facet"/>
<concept id="file"/>
<concept id="filter"/>
<concept id="fipa"/>
<concept id="fsm"/>
<concept id="geometry"/>
<concept id="gis"/>
<concept id="global"/>
<concept id="graph"/>
<concept id="graph_weight"/>
<concept id="grid"/>
<concept id="graphic"/>
<concept id="graphic_unit"/>
<concept id="gui"/>
<concept id="halt"/>
<concept id="headless"/>
<concept id="hydrology"/>
<concept id="image"/>
<concept id="import"/>
<concept id="inheritance"/>
<concept id="init"/>
<concept id="inspector"/>
<concept id="layer"/>
<concept id="length_unit"/>
<concept id="light"/>
<concept id="list"/>
<concept id="load_file"/>
<concept id="logical"/>
<concept id="loop"/>
<concept id="matrix"/>
<concept id="math"/>
<concept id="map"/>
<concept id="mirror"/>
<concept id="model"/>
<concept id="monitor"/>
<concept id="multi_level"/>
<concept id="multi_criteria"/>
<concept id="multi_simulation"/>
<concept id="neighbors"/>
<concept id="network"/>
<concept id="nil"/>
<concept id="node"/>
<concept id="obj"/>
<concept id="obstacle"/>
<concept id="opengl"/>
<concept id="operator"/>
<concept id="optimization"/>
<concept id="osm"/>
<concept id="output"/>
<concept id="overlay"/>
<concept id="parameter"/>
<concept id="pause"/>
<concept id="permanent"/>
<concept id="physics_engine"/>
<concept id="point"/>
<concept id="probability"/>
<concept id="pseudo_variable"/>
<concept id="r"/>
<concept id="random"/>
<concept id="random_operator"/>
<concept id="raster"/>
<concept id="regression"/>
<concept id="reflex"/>
<concept id="refresh"/>
<concept id="save_file"/>
<concept id="scheduler"/>
<concept id="serialize"/>
<concept id="shape"/>
<concept id="shapefile"/>
<concept id="shortest_path"/>
<concept id="skill"/>
<concept id="sound"/>
<concept id="spatial_computation"/>
<concept id="spatial_relation"/>
<concept id="spatial_transformation"/>
<concept id="species"/>
<concept id="sport"/>
<concept id="statistic"/>
<concept id="string"/>
<concept id="surface_unit"/>
<concept id="svg"/>
<concept id="system"/>
<concept id="task_based"/>
<concept id="ternary"/>
<concept id="text"/>
<concept id="texture"/>
<concept id="test"/>
<concept id="3d"/>
<concept id="tif"/>
<concept id="time"/>
<concept id="time_unit"/>
<concept id="topology"/>
<concept id="torus"/>
<concept id="transport"/>
<concept id="txt"/>
<concept id="type"/>
<concept id="update"/>
<concept id="volume_unit"/>
<concept id="weight_unit"/>
<concept id="write"/>
<concept id="xml"/>
<concept id="world"/>
</conceptList>
<constants/>
<operatorsCategories>
<category id="Iterator operators"/>
<category id="TrafficLaw"/>
<category id="TrafficGenerator"/>
<category id="TrafficScheduler"/>
<category id="TrafficPeriod"/>
</operatorsCategories>
<operators>
<operator alphabetOrder="os" id="pearson_6_law" name="pearson_6_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha1" position="0" type="float"/>
<operand name="alpha2" position="1" type="float"/>
<operand name="beta" position="2" type="float"/>
<operand name="u" position="3" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a Pearson 6 traffic law pearson_6_law(alpha1(shape1), alpha2(shape2), beta(scale), u(location))</result>
</documentation>
</operator>
<operator alphabetOrder="ch" id="exponential_law" name="exponential_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="lambda" position="0" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create an exponential traffic law</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="pareto_3_law" name="pareto_3_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="gamma" position="0" type="float"/>
<operand name="beta" position="1" type="float"/>
<operand name="u" position="2" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a pareto 3 traffic law pareto_3_law(gamma(inequality), beta(scale), u(location))</result>
</documentation>
</operator>
<operator alphabetOrder="in" id="lognormal_law" name="lognormal_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="meanLog" position="0" type="float"/>
<operand name="sdLog" position="1" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a lognormal traffic law lognormal_law(meanlog,sdlog)</result>
</documentation>
</operator>
<operator alphabetOrder="ch" id="create_schedule" name="create_schedule">
<operatorCategories>
<category id="TrafficScheduler"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficScheduler.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficScheduler" type="-13">
<operand name="pds" position="0" type="msi.gama.util.IList&lt;ummisco.gama.traffgen.types.TrafficPeriod&gt;"/>
<operand name="type" position="1" type="string"/>
</operands>
</combinaisonIO>
<documentation>
<result>to create a scheduler</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="pearson_3_law" name="pearson_3_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha" position="0" type="float"/>
<operand name="sigma" position="1" type="float"/>
<operand name="u" position="2" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a Pearson 3 traffic law pearson_3_law(alpha(shape), sigma(scale), u(location))</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="shifted_lognormal_law" name="shifted_lognormal_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="meanLog" position="0" type="float"/>
<operand name="sdLog" position="1" type="float"/>
<operand name="u" position="2" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a shifted lognormal traffic law shifted_lognormal_law(meanlog, sdlog, u(location))</result>
</documentation>
</operator>
<operator alphabetOrder="in" id="map_traffgen" name="map_traffgen">
<operatorCategories>
<category id="TrafficGenerator"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="generators" position="0" type="msi.gama.util.IList&lt;ummisco.gama.traffgen.types.TrafficGenerator&gt;"/>
<operand name="nexts" position="1" type="msi.gama.util.GamaMap&lt;msi.gaml.species.GamlSpecies,java.lang.Double&gt;"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a map traffic generator</result>
</documentation>
</operator>
<operator alphabetOrder="in" id="location_traffgen" name="location_traffgen">
<operatorCategories>
<category id="TrafficGenerator"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="generators" position="0" type="msi.gama.util.IList&lt;ummisco.gama.traffgen.types.TrafficGenerator&gt;"/>
<operand name="choice" position="1" type="map&lt;agent,float&gt;"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a location traffic generator - we use only map in this case</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="pearson_5_law" name="pearson_5_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha" position="0" type="float"/>
<operand name="beta" position="1" type="float"/>
<operand name="u" position="2" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a pearson 5 traffic law person_5_law(alpha(shape), beta(scale),u(location));</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="pareto_4_law" name="pareto_4_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha" position="0" type="float"/>
<operand name="gamma" position="1" type="float"/>
<operand name="sigma" position="2" type="float"/>
<operand name="u" position="3" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a pareto 4 traffic law pareto_4_law(alpha(shape),gamma(inequality), sigma(scale), u(location))</result>
</documentation>
</operator>
<operator alphabetOrder="ch" id="gamma_law" name="gamma_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha" position="0" type="float"/>
<operand name="lambda" position="1" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a gamma traffic law gamma_law(alpha(shape),lambda(rate))</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="synchronized_traffgen" name="synchronized_traffgen">
<operatorCategories>
<category id="TrafficGenerator"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="generators" position="0" type="msi.gama.util.IList&lt;ummisco.gama.traffgen.types.TrafficGenerator&gt;"/>
<operand name="nexts" position="1" type="list&lt;float&gt;"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="generators" position="0" type="msi.gama.util.IList&lt;ummisco.gama.traffgen.types.TrafficGenerator&gt;"/>
<operand name="nexts" position="1" type="matrix&lt;float&gt;"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a list traffic generator
create a matrix transition traffic generator</result>
</documentation>
</operator>
<operator alphabetOrder="ch" id="create_period" name="create_period">
<operatorCategories>
<category id="TrafficPeriod"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficPeriod.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficPeriod" type="-13">
<operand name="gen" position="0" type="ummisco.gama.traffgen.types.TrafficGenerator"/>
<operand name="duration" position="1" type="int"/>
<operand name="nbIndividual" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficPeriod.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficPeriod" type="-13">
<operand name="gen" position="0" type="ummisco.gama.traffgen.types.TrafficGenerator"/>
<operand name="duration" position="1" type="int"/>
<operand name="nbIndividual" position="2" type="int"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a periode
create a periode</result>
</documentation>
</operator>
<operator alphabetOrder="os" id="poisson_law" name="poisson_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="lambda" position="0" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a poisson traffic law</result>
</documentation>
</operator>
<operator alphabetOrder="in" id="inverse_gamma_law" name="inverse_gamma_law">
<operatorCategories>
<category id="TrafficLaw"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficLaw.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficLaw" type="-13">
<operand name="alpha" position="0" type="float"/>
<operand name="beta" position="1" type="float"/>
</operands>
</combinaisonIO>
<documentation>
<result>create a inverse gamma traffic law inverse_gamma_law(alpha(shape), beta(scale))</result>
</documentation>
</operator>
<operator alphabetOrder="ab" id="atomic_traffgen" name="atomic_traffgen">
<operatorCategories>
<category id="TrafficGenerator"/>
</operatorCategories>
<concepts/>
<combinaisonIO>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gaml.species.GamlSpecies"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="shp" position="3" type="geometry"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gama.util.IList&lt;msi.gaml.species.GamlSpecies&gt;"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gaml.species.GamlSpecies"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gaml.species.GamlSpecies"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="vehicleFlow" position="3" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="duration" position="4" type="int"/>
<operand name="shp" position="5" type="geometry"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gama.util.IList&lt;msi.gaml.species.GamlSpecies&gt;"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="shp" position="3" type="geometry"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gama.util.IList&lt;msi.gaml.species.GamlSpecies&gt;"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="vehicleFlow" position="3" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="duration" position="4" type="int"/>
<operand name="shp" position="5" type="geometry"/>
</operands>
<operands class="ummisco/gama/traffgen/types/TrafficGenerator.java" contentType="-13" returnType="ummisco.gama.traffgen.types.TrafficGenerator" type="-13">
<operand name="agentSpecies" position="0" type="msi.gaml.species.GamlSpecies"/>
<operand name="thLaw" position="1" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="speedLaw" position="2" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="vehicleFlow" position="3" type="ummisco.gama.traffgen.types.TrafficLaw"/>
<operand name="duration" position="4" type="int"/>
</operands>
</combinaisonIO>
<documentation>
<result>create an atomic traffic generator with one species and a shape location
create an atomic traffic generator
create an atomic traffic generator with one species
create an atomic traffic generator with one species vehicle flow, duration and a shape location
create an atomic traffic generator with a list of species and a shape location
create an atomic traffic generator with a list of species, vehicle flow, duration and a shape location
create an atomic traffic generator with one species and vehicle flow, duration </result>
</documentation>
</operator>
<operator alphabetOrder="ch" id="dummy" name="dummy">
<concepts/>
<combinaisonIO>
<operands class="ummisco.gama.traffgen.types.DummyType" contentType="" returnType="dummy" type="">
<operand name="val" position="0" type="any"/>
</operands>
</combinaisonIO>
<documentation>
<result>Casts the operand into the type dummy</result>
</documentation>
</operator>
<operator alphabetOrder="tz" id="traffgen_gen" name="traffgen_gen">
<concepts/>
<combinaisonIO>
<operands class="ummisco.gama.traffgen.types.TrafficGeneratorType" contentType="" returnType="traffgen_gen" type="">
<operand name="val" position="0" type="any"/>
</operands>
</combinaisonIO>
<documentation>
<result>Casts the operand into the type traffgen_gen</result>
</documentation>
</operator>
<operator alphabetOrder="tz" id="traffgen_scheduler" name="traffgen_scheduler">
<concepts/>
<combinaisonIO>
<operands class="ummisco.gama.traffgen.types.TrafficSchedulerType" contentType="" returnType="traffgen_scheduler" type="">
<operand name="val" position="0" type="any"/>
</operands>
</combinaisonIO>
<documentation>
<result>Casts the operand into the type traffgen_scheduler</result>
</documentation>
</operator>
<operator alphabetOrder="tz" id="traffgen_law" name="traffgen_law">
<concepts/>
<combinaisonIO>
<operands class="ummisco.gama.traffgen.types.TrafficLawType" contentType="" returnType="traffgen_law" type="">
<operand name="val" position="0" type="any"/>
</operands>
</combinaisonIO>
<documentation>
<result>Casts the operand into the type traffgen_law</result>
</documentation>
</operator>
<operator alphabetOrder="tz" id="traffgen_period" name="traffgen_period">
<concepts/>
<combinaisonIO>
<operands class="ummisco.gama.traffgen.types.TrafficPeriodType" contentType="" returnType="traffgen_period" type="">
<operand name="val" position="0" type="any"/>
</operands>
</combinaisonIO>
<documentation>
<result>Casts the operand into the type traffgen_period</result>
</documentation>
</operator>
</operators>
<skills/>
<architectures/>
<speciess/>
<insideStatementKinds/>
<insideStatementSymbols/>
<statementsKinds/>
<statements/>
<files/>
<types>
<type id="89" kind="104" name="dummy">
<concepts/>
</type>
<type id="4618" kind="104" name="traffgen_gen">
<documentation>
<result> traffic generator </result>
</documentation>
<concepts/>
</type>
<type id="4621" kind="104" name="traffgen_scheduler">
<documentation>
<result> traffic law for generation </result>
</documentation>
<concepts/>
</type>
<type id="4617" kind="104" name="traffgen_law">
<documentation>
<result> traffic law for generation </result>
</documentation>
<concepts/>
</type>
<type id="4620" kind="104" name="traffgen_period">
<documentation>
<result> traffic period for generation </result>
</documentation>
<concepts/>
</type>
</types>
</doc>
